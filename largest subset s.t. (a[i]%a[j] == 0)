class Solution {
public:
//largest subset such that (a[i] % a[j] == 0) for all i and j

    vector<int> largestDivisibleSubset(vector<int>& nums) {
         sort(nums.begin(), nums.end());
         int n = (int) nums.size();
         vector <pair <int, int>> dp(n + 5, {1, -1});
         //dp[i] = {max no. of ele, next ele}
         for (int i = n - 2; i >= 0; i--){
             for (int j = i + 1; j < nums.size(); j++){
                 if(nums[j] % nums[i] == 0){
                     if(1 + dp[j].first > dp[i].first){
                         dp[i].first = 1 + dp[j].first;
                         dp[i].second = j;
                     }
                 }
             }
         }

         int mm = 0;
         int id = -1;
         for (int i = 0; i < nums.size(); i++){
             if(dp[i].first > mm){
                 mm = dp[i].first;
                 id = i;
             }
         }

         vector <int> ans;
         while(id != -1){
             ans.push_back(nums[id]);
             id = dp[id].second;
         }
         return ans;
    }
};

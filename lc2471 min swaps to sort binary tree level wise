/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void lot(TreeNode* node, vector <vector <int>> &trav){
        queue <TreeNode*> q;
        q.push(node);
        while(!q.empty()){
            int n1 = q.size();
            vector <int> temp;
            for (int i = 0; i < n1; i++){
                TreeNode* cur = q.front();
                q.pop();
                temp.push_back(cur -> val);
                if(cur -> left != NULL)q.push(cur -> left);
                if(cur -> right != NULL)q.push(cur -> right);
            }
            trav.push_back(temp);
        }
    }
    int minimumOperations(TreeNode* root) {
        vector <vector <int>> trav;
        lot(root, trav);
        map <int, int> pos;
        int ans = 0;
        for (auto vec : trav){
            vector <int> temp = vec;
            sort(temp.begin(), temp.end());
            for (int i = 0; i < temp.size(); i++){
                pos[vec[i]] = i;
            }
            for (int i = 0; i < temp.size(); i++){
                if(temp[i] != vec[i]){
                    ans ++;
                    int x = pos[temp[i]];
                    swap(vec[i], vec[x]);
                    pos[vec[i]] = i;
                    pos[vec[x]] = x;
                }
            }
        }
        return ans;
    }
};

class Solution {
    //how to find the largest mine in O(n * n)
    //trying a dp approach where we pre store the no. of ones
    //in the four directions of a grid cell
    //How to do that in less code and fast time
    //Achi practice hojayegi to traverse in grid
public:
    int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {
        vector <vector <int>> grid(n, vector <int> (n, 1));
        for (auto pr : mines){
            grid[pr[0]][pr[1]] = 0;
        }

        vector <vector <vector <int>>> dp(n + 5, vector <vector <int>> (n + 5, vector <int> (4, 0)));
        //4 kind of traversals {up, down, left, right}
        for (int j = 0; j < n; j++){
            for (int i = 0; i < n; i++){
                if(grid[i][j] == 1){
                    dp[i + 1][j + 1][0] = dp[i][j + 1][0] + 1;
                }
            }
        }

        //traverse 2
        for (int j = 0; j < n; j++){
            for (int i = n - 1; i >= 0; i--){
                if(grid[i][j] == 1){
                    dp[i + 1][j + 1][1] = dp[i + 2][j + 1][1] + 1;
                }
            }
        }

        //traverse 3
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                if(grid[i][j] == 1){
                    dp[i + 1][j + 1][2] = dp[i + 1][j][2] + 1;
                }
            }
        }
        
        //traverse 4
        for (int i = 0; i < n; i++){
            for (int j = n - 1; j >= 0; j--){
                if(grid[i][j] == 1){
                    dp[i + 1][j + 1][3] = 1 + dp[i + 1][j + 2][3];
                }
            }
        }
        // for (int i = 1; i <= n; i++){
        //     for (int j = 1; j <= n; j++){
        //         cout << dp[i][j][0] << " ";
        //     }
        //     cout << endl;
        // }
        // cout << endl;
        // for (int i = 1; i <= n; i++){
        //     for (int j = 1; j <= n; j++){
        //         cout << dp[i][j][1] << " ";
        //     }
        //     cout << endl;
        // }
        // cout << endl;
        // for (int i = 1; i <= n; i++){
        //     for (int j = 1; j <= n; j++){
        //         cout << dp[i][j][2] << " ";
        //     }
        //     cout << endl;
        // }
        // cout << endl;
        // for (int i = 1; i <= n; i++){
        //     for (int j = 1; j <= n; j++){
        //         cout << dp[i][j][3] << " ";
        //     }
        //     cout << endl;
        // }

        int ans = 0;
        for (int i = 1; i <= n; i++){
            for (int j = 1; j <= n; j++){
                if(grid[i - 1][j - 1] == 1){
                    ans = max(ans, 1);
                    if(i + 1 <= n && i - 1 >= 1 && j + 1 <= n && j - 1 >= 1){
                        ans = max(ans, 1 + min(dp[i + 1][j][1], min(dp[i][j + 1][3], min(dp[i - 1][j][0], dp[i][j - 1][2]))));
                    }
                }
            }
        }
        return ans;

    }
};
